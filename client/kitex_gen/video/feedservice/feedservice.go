// Code generated by Kitex v0.4.4. DO NOT EDIT.

package feedservice

import (
	"context"
	video "douyin_rpc/client/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedServiceServiceInfo
}

var feedServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FeedService"
	handlerType := (*video.FeedService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":          kitex.NewMethodInfo(feedHandler, newFeedServiceFeedArgs, newFeedServiceFeedResult, false),
		"PublishAction": kitex.NewMethodInfo(publishActionHandler, newFeedServicePublishActionArgs, newFeedServicePublishActionResult, false),
		"PublishList":   kitex.NewMethodInfo(publishListHandler, newFeedServicePublishListArgs, newFeedServicePublishListResult, false),
		"GetVideo":      kitex.NewMethodInfo(getVideoHandler, newFeedServiceGetVideoArgs, newFeedServiceGetVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.FeedServiceFeedArgs)
	realResult := result.(*video.FeedServiceFeedResult)
	success, err := handler.(video.FeedService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceFeedArgs() interface{} {
	return video.NewFeedServiceFeedArgs()
}

func newFeedServiceFeedResult() interface{} {
	return video.NewFeedServiceFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.FeedServicePublishActionArgs)
	realResult := result.(*video.FeedServicePublishActionResult)
	success, err := handler.(video.FeedService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServicePublishActionArgs() interface{} {
	return video.NewFeedServicePublishActionArgs()
}

func newFeedServicePublishActionResult() interface{} {
	return video.NewFeedServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.FeedServicePublishListArgs)
	realResult := result.(*video.FeedServicePublishListResult)
	success, err := handler.(video.FeedService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServicePublishListArgs() interface{} {
	return video.NewFeedServicePublishListArgs()
}

func newFeedServicePublishListResult() interface{} {
	return video.NewFeedServicePublishListResult()
}

func getVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.FeedServiceGetVideoArgs)
	realResult := result.(*video.FeedServiceGetVideoResult)
	success, err := handler.(video.FeedService).GetVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceGetVideoArgs() interface{} {
	return video.NewFeedServiceGetVideoArgs()
}

func newFeedServiceGetVideoResult() interface{} {
	return video.NewFeedServiceGetVideoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.FeedServiceFeedArgs
	_args.Req = req
	var _result video.FeedServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *video.PublishActionRequest) (r *video.PublishActionResponse, err error) {
	var _args video.FeedServicePublishActionArgs
	_args.Req = req
	var _result video.FeedServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args video.FeedServicePublishListArgs
	_args.Req = req
	var _result video.FeedServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideo(ctx context.Context, req *video.GetVideoRequest) (r *video.GetVideoResponse, err error) {
	var _args video.FeedServiceGetVideoArgs
	_args.Req = req
	var _result video.FeedServiceGetVideoResult
	if err = p.c.Call(ctx, "GetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
