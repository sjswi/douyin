// Code generated by hertz generator.

package main

import (
	_ "douyin_rpc/server/cmd/api/docs"
	"douyin_rpc/server/cmd/api/global"
	"douyin_rpc/server/cmd/api/initialize"
	"douyin_rpc/server/cmd/api/initialize/rpc"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/swagger"
	swaggerFiles "github.com/swaggo/files"
)

// @title douyin
// @version 1.0
// @description 青训营抖音大项目
// @termsOfService http://swagger.io/terms/
// @contact.name 余晓兵
// @contact.url http://www.swagger.io/support
// @contact.email 1903317091@qq.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host 192.168.56.100:10000
// @BasePath /
func main() {
	// kitex的log
	r, info := initialize.InitNacos()
	initialize.InitLogger()
	// hertz的log
	initialize.InitHertzLogger()
	initialize.InitOSS()

	//tracer, cfg := hertztracing.NewServerTracer()
	rpc.Init()
	h := server.New(
		//tracer,

		server.WithHostPorts(fmt.Sprintf(":%d", global.ServerConfig.Port)),
		server.WithRegistry(r, info),
		server.WithHandleMethodNotAllowed(true),
		server.WithMaxRequestBodySize(20>>20),
	)
	// use pprof & tracer mw
	pprof.Register(h)
	//h.Use(hertztracing.ServerMiddleware(cfg))
	register(h)
	url := swagger.URL("http://192.168.56.100:10000/swagger/doc.json") // The url pointing to API definition
	h.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, url))
	h.Spin()
}
