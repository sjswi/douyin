// Code generated by hertz generator.

package api

import (
	"context"
	"douyin_rpc/server/cmd/api/global"
	"douyin_rpc/server/cmd/api/kitex_gen/favorite"
	"strconv"

	api "douyin_rpc/server/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteAction
// @Summary 点赞操作，点赞或取消点赞
// @Tags 点赞
// @version 1.0
// @Accept application/x-json-stream
// @Param token query string true "token"
// @Param video_id query int true "视频id"
// @Param action_type query int true "事件类型，1点赞，2取消点赞"
// @Success 200 object favorite.FavoriteActionRequest 成功后返回值
// @Failure 409 object favorite.FavoriteActionRequest 失败后返回值
// @Router /douyin/favorite/action/ [post]
// @router /douyin/favorite/action/ [post]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	videoId, err := strconv.ParseInt(req.VideoID, 0, 64)
	if err != nil {
		return
	}
	actionType, err := strconv.ParseInt(req.VideoID, 0, 32)
	if err != nil {
		return
	}
	resp, err := global.FavoriteClient.FavoriteAction(ctx, &favorite.FavoriteActionRequest{
		VideoId:    videoId,
		AuthId:     value.(int64),
		ActionType: int32(actionType),
	})
	if err != nil {
		return
	}

	//resp := new(api.FavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList
// @Summary 获取所有点赞过的视频
// @Tags 点赞
// @version 1.0
// @Accept application/x-json-stream
// @Param user_id query int true "用户id"
// @Param token query string true "token"
// @Success 200 object favorite.FavoriteListResponse 成功后返回值
// @Failure 409 object favorite.FavoriteListResponse 失败后返回值
// @Router /douyin/favorite/list/ [get]
// @router /douyin/favorite/list/ [get]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	userId, err := strconv.ParseInt(req.UserID, 0, 64)
	if err != nil {
		return
	}
	resp, err := global.FavoriteClient.FavoriteList(ctx, &favorite.FavoriteListRequest{
		AuthId: value.(int64),
		UserId: userId,
	})
	if err != nil {
		return
	}
	//resp := new(api.FavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}
