// Code generated by hertz generator.

package api

import (
	"context"
	"douyin_rpc/server/cmd/api/global"
	"douyin_rpc/server/cmd/api/kitex_gen/video"

	api "douyin_rpc/server/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.VideoClient.PublishAction(ctx, &video.PublishActionRequest{
		Data:   req.Data,
		AuthId: value.(int64),
		Title:  req.Title,
	})
	if err != nil {
		return
	}
	//resp := new(api.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.VideoClient.PublishList(ctx, &video.PublishListRequest{
		AuthId: value.(int64),
		UserId: req.UserID,
	})
	if err != nil {
		return
	}
	//resp := new(api.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}
