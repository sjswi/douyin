// Code generated by hertz generator.

package api

import (
	"context"
	api "douyin_rpc/server/cmd/api/biz/model/api"
	"douyin_rpc/server/cmd/api/global"
	"douyin_rpc/server/cmd/api/kitex_gen/comment"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strconv"
)

// CommentAction
// @Summary 评论操作，删除或增加
// @Tags 评论
// @version 1.0
// @Accept application/x-json-stream
// @Param video_id query int true "视频id"
// @Param token query string true "token"
// @Param action_type query int true "操作类型"
// @Param comment_text query string false "评论内容"
// @Param comment_id query int false "评论id"
// @Success 200 object comment.CommentActionResponse 成功后返回值
// @Failure 409 object comment.CommentActionResponse 失败后返回值
// @Router /douyin/comment/action/ [post]
// @router /douyin/comment/action/ [post]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	videoId, err := strconv.ParseInt(req.VideoID, 0, 64)
	if err != nil {
		return
	}
	actionType, err := strconv.ParseInt(req.ActionType, 0, 32)
	if err != nil {
		return
	}
	var commentID int64
	commentID = -1
	if actionType != 1 {
		commentID, err = strconv.ParseInt(req.CommentID, 0, 64)
		if err != nil {
			return
		}
	}
	resp := new(comment.CommentActionResponse)
	//resp := new(api.CommentActionResponse)
	resp, err = global.CommentClient.CommentAction(ctx, &comment.CommentActionRequest{
		VideoId:     videoId,
		AuthId:      value.(int64),
		ActionType:  int32(actionType),
		CommentText: req.CommentText,
		CommentId:   commentID,
	})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
	}
	//resp.Comment = api.NewComment()
	//resp.Comment.ID = resp1.Comment.Id
	//resp.Comment.User = api.NewUser()
	//resp.Comment.User.FollowCount = resp1.Comment.User.FollowCount
	//resp.Comment.Content = resp1.Comment.Content
	//resp.Comment.User.FollowerCount = resp1.Comment.User.FollowerCount
	//resp.Comment.User.Name = resp1.Comment.User.Name
	//resp.Comment.User.IsFollow = resp1.Comment.User.IsFollow
	//resp.Comment.User.ID = resp1.Comment.User.Id

	c.JSON(consts.StatusOK, resp)
}

// CommentList
// @Summary 获取所有评论
// @Tags 评论
// @version 1.0
// @Param video_id query int true "视频id"
// @Param token query string true "token"
// @Success 200 object comment.CommentListResponse 成功后返回值
// @Failure 409 object comment.CommentListResponse 失败后返回值
// @Router /douyin/comment/list/ [get]
// @router /douyin/comment/list/ [get]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	//authID, err := strconv.Atoi(c.Get("accountID"))
	videoId, err := strconv.ParseInt(req.VideoID, 0, 64)
	if err != nil {
		return
	}
	resp, err := global.CommentClient.CommentList(ctx, &comment.CommentListRequest{
		AuthId:  value.(int64),
		VideoId: videoId,
	})
	if err != nil {
		return
	}
	//resp := new(api.CommentListResponse)

	c.JSON(consts.StatusOK, resp)
}
