// Code generated by hertz generator.

package api

import (
	"context"
	"douyin_rpc/server/cmd/api/global"
	"douyin_rpc/server/cmd/api/kitex_gen/relation"

	api "douyin_rpc/server/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Action .
// @router /douyin/relation/action/ [POST]
func Action(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.RelationClient.Action(ctx, &relation.RelationActionRequest{
		AuthId:     value.(int64),
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})
	if err != nil {
		return
	}
	//resp := new(api.PublishActionResponse)
	//resp := new(api.RelationActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.RelationClient.FollowList(ctx, &relation.RelationFollowListRequest{
		AuthId: value.(int64),
		UserId: req.UserID,
	})
	if err != nil {
		return
	}
	//resp := new(api.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.RelationClient.FollowerList(ctx, &relation.RelationFollowerListRequest{
		AuthId: value.(int64),
		UserId: req.UserID,
	})
	if err != nil {
		return
	}
	//resp := new(api.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.RelationClient.FriendList(ctx, &relation.RelationFriendListRequest{
		AuthId: value.(int64),
		UserId: req.UserID,
	})
	if err != nil {
		return
	}
	//resp := new(api.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}
