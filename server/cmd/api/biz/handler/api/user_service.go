// Code generated by hertz generator.

package api

import (
	"context"
	"douyin_rpc/server/cmd/api/constant"
	"douyin_rpc/server/cmd/api/global"
	"douyin_rpc/server/cmd/api/kitex_gen/user"
	"douyin_rpc/server/cmd/api/middleware"
	"douyin_rpc/server/cmd/api/models"
	"github.com/golang-jwt/jwt"
	"time"

	api "douyin_rpc/server/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, err := global.UserClient.Login(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		return
	}
	j := middleware.NewJWT()
	claims := models.CustomClaims{
		ID: resp.UserId,
		StandardClaims: jwt.StandardClaims{
			NotBefore: time.Now().Unix(),
			ExpiresAt: time.Now().Unix() + constant.ThirtyDays,
			Issuer:    constant.JWTIssuer,
		},
	}
	response := new(api.LoginResponse)
	token, err := j.CreateToken(claims)
	if err != nil {
		response.StatusCode = 1
		response.StatusMsg = err.Error()
		return
	}
	response.StatusCode = 0
	response.UserID = resp.UserId
	response.Token = token
	c.JSON(consts.StatusOK, response)
}

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	response := new(api.RegisterResponse)
	resp, err := global.UserClient.Register(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		response.StatusCode = 1
		response.StatusMsg = err.Error()
		return
	}
	//resp := new(api.LoginResponse)
	j := middleware.NewJWT()
	claims := models.CustomClaims{
		ID: resp.UserId,
		StandardClaims: jwt.StandardClaims{
			NotBefore: time.Now().Unix(),
			ExpiresAt: time.Now().Unix() + constant.ThirtyDays,
			Issuer:    constant.JWTIssuer,
		},
	}

	token, err := j.CreateToken(claims)
	if err != nil {

		return
	}
	response.StatusCode = 0
	response.UserID = resp.UserId
	response.Token = token
	c.JSON(consts.StatusOK, response)
}

// GetUser .
// @router /douyin/user/ [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	value, exist := c.Get("accountID")
	if !exist {
		return
	}
	resp, err := global.UserClient.User(ctx, &user.UserRequest{
		UserId: req.UserID,
		AuthId: value.(int64),
	})
	if err != nil {
		return
	}
	//resp := new(api.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}
